1. A class should always start with an uppercase first letter.
Note: Java is case-sensitive: "MyClass" and "myclass" has different meaning.
** The name of the java file must match the class name. When saving the file, save it using the class name and add ".java" to the end of the filename.

2. The main() method is required and you will see it in every Java program :
    public static void main(String[] args)
    ** Any code inside the main() method will be executed. 
** Note: The curly braces {} marks the beginning and the end of a block of code.
** You should also note that each code statement must end with a semicolon (;).

3. When you are working with text, it must be wrapped inside double quotations marks "".

4. we don't put numbers inside double quotes.
** You can also perform mathematical calculations inside the println() method.

5. We use comments to explain what our code does or how it works. Single line Comments begin with //
** It can also be used to prevent execution when testing alternative code.

6. Multi-line comments start with /* and ends with */.

7. Variables are containers for storing data values.
** In Java, there are different types of variables, for example:

    String - stores text, such as "Hello". String values are surrounded by double quotes
    int - stores integers (whole numbers), without decimals, such as 123 or -123
    float - stores floating point numbers, with decimals, such as 19.99 or -19.99
    char - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes
    boolean - stores values with two states: true or false

To create a variable, you must specify the type and assign it a value:
    **type variableName = value;**

 ** You can also declare a variable without assigning the value, and assign the value later:
    int myNum;
    myNum = 15;

8. If you don't want others (or yourself) to overwrite existing values, use the final 
    keyword (this will declare the variable as "final" or "constant", which means unchangeable and read-only)

9. All Java variables must be identified with unique names.
    These unique names are called identifiers.
    Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).
    Note: It is recommended to use descriptive names in order to create understandable and maintainable code

** The general rules for naming variables are:

    Names can contain letters, digits, underscores, and dollar signs
    Names must begin with a letter
    Names should start with a lowercase letter and it cannot contain whitespace
    Names can also begin with $ and _ (but we will not use it in this tutorial)
    Names are case sensitive ("myVar" and "myvar" are different variables)
    Reserved words (like Java keywords, such as int or boolean) cannot be used as names

10. Data types are divided into two groups:
    Primitive data types - includes byte, short, int, long, float, double, boolean and char
    Non-primitive data types - such as String, Arrays and Classes.

- Primitive number types are divided into two groups:
    Integer types stores whole numbers, positive or negative (such as 123 or -456),
     without decimals. Valid types are byte, short, int and long. Which type you should use,
      depends on the numeric value.

    Floating point types represents numbers with a fractional part, containing one or more decimals.
     There are two types: float and double.

- The float and double data types can store fractional numbers. 
    ** Note that you should end the value with an "f" for floats and "d" for doubles
    -- Use float or double?
        The precision of a floating point value indicates how many digits the value can
        have after the decimal point. The precision of float is only six or seven decimal
        digits, while double variables have a precision of about 15 digits. Therefore it 
        is safer to use double for most calculations.

** A floating point number can also be a scientific number with an "e" to indicate the power of 10:
    float f1 = 35e3f;
    double d1 = 12E4d;

- Java has a boolean data type, which can only take the values true or false

- The char data type is used to store a single character. The character must be surrounded by
    single quotes, like 'A' or 'c'.

- Non-primitive data types are called reference types because they refer to objects.
** The main difference between primitive and non-primitive data types are:
    .Primitive types are predefined (already defined) in Java. Non-primitive types are created by the programmer
     and is not defined by Java (except for String).
    .Non-primitive types can be used to call methods to perform certain operations, while primitive types cannot.
    .A primitive type has always a value, while non-primitive types can be null.
    .A primitive type starts with a lowercase letter, while non-primitive types starts with an uppercase letter.

11. type casting is when you assign a value of one primitive data type to another type.
- In Java, there are two types of casting:

    Widening Casting (automatically) - converting a smaller type to a larger type size
    byte -> short -> char -> int -> long -> float -> double

    Narrowing Casting (manually) - converting a larger type to a smaller size type
    double -> float -> long -> int -> char -> short -> byte 

** Narrowing casting must be done manually by placing the type in parentheses in front of the value:
    double myDouble = 9.78d;
    int myInt = (int) myDouble; // Manual casting: double to int

12. Java divides the operators into the following groups:
    Arithmetic operators +,-,*,/,%,++,--
    Assignment operators =,+=,-=,*=,/=,%=,&=,|=,^=,>>=,<<=
    Comparison operators ==,!=,<,>,>=,<=
    Logical operators &&,||,!
    Bitwise operators

13. Java counts positions from zero.
    0 is the first position in a string, 1 is the second, 2 is the third ...

%**
    WARNING!
        Java uses the + operator for both addition and concatenation.
        Numbers are added. Strings are concatenated.
                                                                        **%
